<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.swust.fund.dao.AdminLoginLogMapper">
    <cache type="org.mybatis.caches.redis.RedisCache"/>
    <resultMap id="BaseResultMap" type="com.swust.fund.entity.AdminLoginLog">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="login_time" property="loginTime" jdbcType="TIMESTAMP"/>
        <result column="login_ip" property="loginIp" jdbcType="INTEGER"/>
        <result column="admin_id" property="adminId" jdbcType="INTEGER"/>
        <result column="admin_name" property="adminName" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, login_time, login_ip, admin_id
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
    id, login_time, login_ip, a.admin_id as admin_id,u.admin_real_name as admin_name
        from t_admin_login_log a
        inner join t_admin_user u on a.admin_id = u.admin_id
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_admin_login_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.swust.fund.entity.AdminLoginLog">
    insert into t_admin_login_log (id, login_time, login_ip, 
      admin_id)
    values (#{id,jdbcType=INTEGER}, #{loginTime,jdbcType=TIMESTAMP}, #{loginIp,jdbcType=INTEGER}, 
      #{adminId,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.swust.fund.entity.AdminLoginLog">
        insert into t_admin_login_log
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="loginTime != null">
                login_time,
            </if>
            <if test="loginIp != null">
                login_ip,
            </if>
            <if test="adminId != null">
                admin_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="loginTime != null">
                #{loginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="loginIp != null">
                #{loginIp,jdbcType=INTEGER},
            </if>
            <if test="adminId != null">
                #{adminId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.swust.fund.entity.AdminLoginLog">
        update t_admin_login_log
        <set>
            <if test="loginTime != null">
                login_time = #{loginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="loginIp != null">
                login_ip = #{loginIp,jdbcType=INTEGER},
            </if>
            <if test="adminId != null">
                admin_id = #{adminId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.swust.fund.entity.AdminLoginLog">
    update t_admin_login_log
    set login_time = #{loginTime,jdbcType=TIMESTAMP},
      login_ip = #{loginIp,jdbcType=INTEGER},
      admin_id = #{adminId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <select id="selectAllLog" resultMap="BaseResultMap">
        select
    id, login_time, login_ip, a.admin_id as admin_id,u.admin_real_name as admin_name
        from t_admin_login_log a
        inner join t_admin_user u on a.admin_id = u.admin_id
    </select>
</mapper>